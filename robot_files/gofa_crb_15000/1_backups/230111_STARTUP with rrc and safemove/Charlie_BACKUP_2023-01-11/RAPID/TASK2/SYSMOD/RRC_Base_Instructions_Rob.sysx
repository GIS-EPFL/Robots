MODULE RRC_Base_Instructions_Rob(SYSMODULE)
    !***********************************************************************************
    !
    ! ETH Zurich / Robotic Fabrication Lab
    ! HIB C 13 / Stefano-Franscini-Platz 1
    ! CH-8093 Zurich
    !
    !***********************************************************************************
    !
    ! PROJECT     :  RRC - Rapid Robot Communication
    !
    ! FUNCTION    :  Base Instracion Library  
    !
    ! AUTHOR      :  Philippe Fleischmann
    !
    ! EMAIL       :  rrc@arch.ethz.ch
    !
    ! HISTORY     :  2019.02.22
    !
    ! Copyright   :  ETH Zurich (CH) 2019
    !                - Philippe Fleischmann
    !                - Michael Lyrenmann
    !                - Gonzalo Casas
    !
    ! License     :  This code base is governed by an EULA (End-User License Agreement)
    !                which you have received together with the software.
    !                You are not allowed to use the software on a real robots
    !                without a signed EULA.
    !
    !                A copy of the EULA content is in the controller task (T_CTRL).
    !
    !***********************************************************************************

    !************************************************
    ! Function    :     Move to Joints (MoveAbsJ)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_MoveToJoints()
        !
        ! Read and set jonttarget
        r_RRC_RasJointtarget;
        !
        ! Read and set tcp speed
        r_RRC_RasTCPSpeed bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V13;
        !
        ! Read and set zone 
        r_RRC_RasZone bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V14;
        !
        ! Move robot
        MoveAbsJ jp_RRC_Act,v_RRC_Act,z_RRC_Act,t_RRC_Act;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Instruction done 
            r_RRC_FDone;
            !
            ! Check additional feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Cenerate feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                DEFAULT:
                    !
                    ! Not defined 
                    !
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Move to (MoveL or MoveJ)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_MoveTo()
        !
        ! Read and set robtarget
        r_RRC_RASRobtarget\stMoveType:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.st1;
        !
        ! Read and set tcp speed
        r_RRC_RasTCPSpeed bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V14;
        !
        ! Read and set zone 
        r_RRC_RasZone bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V15;
        !
        ! Select move type
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.st1="L" OR bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.st1="FrameL" THEN
            ! 
            ! Linear
            !
            !
            ! Deactivate configuration check
            ConfL\Off;
            !
            ! Move robot
            MoveL p_RRC_Act,v_RRC_Act,z_RRC_Act,t_RRC_Act\WObj:=ob_RRC_Act;
            !
            ! Activate configuration check
            ConfL\On;
        ELSE
            !
            ! Joint 
            !
            !
            ! Deactivate configuration check
            ConfJ\Off;
            !
            ! Move robot
            MoveJ p_RRC_Act,v_RRC_Act,z_RRC_Act,t_RRC_Act\WObj:=ob_RRC_Act;
            !
            ! Activate configuration check
            ConfJ\On;
        ENDIF
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Instruction done 
            r_RRC_FDone;
            !
            ! Check additional feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Cenerate feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                DEFAULT:
                    !
                    ! Not defined 
                    !
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set analog output (SetAO)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetAnalog()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,ao_RRC_Act;
        !
        ! Set actual output
        SetAO ao_RRC_Act,bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Read ananlog input ((AInput)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ReadAnalog()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,ai_RRC_Act;
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Read input value and add it to feedback 
        r_RRC_FAddValue AInput(ai_RRC_Act);
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 10001,10002,10003,10004:
                !
                ! add robot position  
                r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set group output (SetGO)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetGroup()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,go_RRC_Act;
        !
        ! Set actual output
        SetGO go_RRC_Act,bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Read group input (GInput)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ReadGroup()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,gi_RRC_Act;
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Read input value and add it to feedback
        r_RRC_FAddValue GInput(gi_RRC_Act);
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 10001,10002,10003,10004:
                !
                ! add robot position  
                r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set digital output (SetDO)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetDigital()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,do_RRC_Act;
        !
        ! Set actual output
        SetDO do_RRC_Act,bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Pulse digital output (PulsDo)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_PulseDigital()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,do_RRC_Act;
        !
        ! Set actual output
        PulseDO\High\PLength:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1,do_RRC_Act;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Read digital input (DInput)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ReadDigital()
        !
        ! Get actual output 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,di_RRC_Act;
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Read input value and add it to feedback
        r_RRC_FAddValue DInput(Di_RRC_Act);
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 10001,10002,10003,10004:
                !
                ! add robot position  
                r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
            DEFAULT:
                !
                ! Not defined 
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set tool (tooldata)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetTool()
        VAR tooldata tX:=[TRUE,[[0,0,0],[1,0,0,0]],[0,[0,0,0],[1,0,0,0],0,0,0]];
        !
        ! Get tool 
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,tX;
        !
        ! Set t_RRC_Act 
        t_RRC_Act:=tX;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Instruction done 
            r_RRC_FDone;
            !
            ! Check additional feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Cenerate feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                CASE 10001:
                    !
                    ! Tooldata 
                    ! String 1 from Client
                    r_RRC_FAddString bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1;
                    !
                    ! String 2 Structure of parameter information 
                    r_RRC_FAddString "Feedback -Tool -Robhold -Pos -Orient -Mass";
                    !
                    ! String 3 roboter hold tool yes or no
                    IF t_RRC_Act.robhold=TRUE r_RRC_FAddString "Yes";
                    IF t_RRC_Act.robhold=FALSE r_RRC_FAddString "No";
                    !
                    ! Value 1..3 TCP position xyz 
                    r_RRC_FAddValue t_RRC_Act.tframe.trans.x;
                    r_RRC_FAddValue t_RRC_Act.tframe.trans.y;
                    r_RRC_FAddValue t_RRC_Act.tframe.trans.z;
                    !
                    ! Value 4..7 TCP orientation q1..q4 
                    r_RRC_FAddValue t_RRC_Act.tframe.rot.q1;
                    r_RRC_FAddValue t_RRC_Act.tframe.rot.q2;
                    r_RRC_FAddValue t_RRC_Act.tframe.rot.q3;
                    r_RRC_FAddValue t_RRC_Act.tframe.rot.q4;
                    !
                    ! Value 8 Tool mass  
                    r_RRC_FAddValue t_RRC_Act.tload.mass;
                DEFAULT:
                    !
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set work object (wobjdata)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetWorkObject()
        VAR wobjdata obX:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
        !
        ! Get workobject
        GetDataVal bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1,obX;
        !
        ! Set ob_RRC_Act 
        ob_RRC_Act:=obX;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Instruction done 
            r_RRC_FDone;
            !
            ! Check additional feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Cenerate feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                CASE 10001:
                    !
                    ! Wobjdata 
                    ! String 1 from Client
                    r_RRC_FAddString bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1;
                    !
                    ! String 2 Structure of parameter information 
                    r_RRC_FAddString "Feedback Workobject -Robhold -UFProg -UFMec -UFPos -UFOrient -OFPos -OFOrient";
                    !
                    ! String 3 roboter hold workobject yes or no
                    IF ob_RRC_Act.robhold=TRUE r_RRC_FAddString "Yes";
                    IF ob_RRC_Act.robhold=FALSE r_RRC_FAddString "No";
                    !
                    ! String 4 roboter user frame used yes or no
                    IF ob_RRC_Act.ufprog=TRUE r_RRC_FAddString "Yes";
                    IF ob_RRC_Act.ufprog=FALSE r_RRC_FAddString "No";
                    !
                    ! String 5 user frame mechanic
                    r_RRC_FAddString ob_RRC_Act.ufmec;
                    !
                    ! Value 1..3 user frame position xyz 
                    r_RRC_FAddValue ob_RRC_Act.uframe.trans.x;
                    r_RRC_FAddValue ob_RRC_Act.uframe.trans.y;
                    r_RRC_FAddValue ob_RRC_Act.uframe.trans.z;
                    !
                    ! Value 4..7 user frame orientation q1..q4 
                    r_RRC_FAddValue ob_RRC_Act.uframe.rot.q1;
                    r_RRC_FAddValue ob_RRC_Act.uframe.rot.q2;
                    r_RRC_FAddValue ob_RRC_Act.uframe.rot.q3;
                    r_RRC_FAddValue ob_RRC_Act.uframe.rot.q4;
                    !
                    ! Value 8..10 object frame position xyz 
                    r_RRC_FAddValue ob_RRC_Act.oframe.trans.x;
                    r_RRC_FAddValue ob_RRC_Act.oframe.trans.y;
                    r_RRC_FAddValue ob_RRC_Act.oframe.trans.z;
                    !
                    ! Value 11..14 object frame orientation q1..q4 
                    r_RRC_FAddValue ob_RRC_Act.oframe.rot.q1;
                    r_RRC_FAddValue ob_RRC_Act.oframe.rot.q2;
                    r_RRC_FAddValue ob_RRC_Act.oframe.rot.q3;
                    r_RRC_FAddValue ob_RRC_Act.oframe.rot.q4;
                DEFAULT:
                    !
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Get robtarget (CRobT)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_GetRobtarget()
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Get robtarget
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1=1 THEN
            !
            ! Fly by
            r_RRC_FActRobT\FlyBy;
        ELSE
            !
            ! In positinton 
            r_RRC_FActRobT;
        ENDIF
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Get joints (CJoinT)  
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_GetJoints()
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Get robtarget
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1=1 THEN
            !
            ! Fly by
            r_RRC_FActJointT\FlyBy;
        ELSE
            !
            ! In positinton 
            r_RRC_FActJointT;
        ENDIF
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Start Stopwatch (ClkStart)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_StartWatch()
        !
        ! Reset and start watch
        ClkReset ck_RRC_StopWatch;
        ClkStart ck_RRC_StopWatch;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Add standard feedback instruction done
            r_RRC_FDone;
            !
            ! Feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Check additional feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                CASE 10001,10002,10003,10004:
                    !
                    ! add robot position  
                    r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
                DEFAULT:
                    !
                    ! Not defined 
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Stop Stopwatch (ClkStop)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_StopWatch()
        !
        ! Stop watch and read time 
        ClkStop ck_RRC_StopWatch;
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Read stop wacht time and add it to feedback 
        bm_RRC_ActSenMsgRob.Data.V1:=ClkRead(ck_RRC_StopWatch);
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Add standard feedback instruction done
            r_RRC_FDone;
            !
            ! Feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Check additional feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                CASE 10001,10002,10003,10004:
                    !
                    ! add robot position  
                    r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
                DEFAULT:
                    !
                    ! Not defined 
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Read Watch (ClkRead)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ReadWatch()
        !
        ! Read stop wacht time and add it to feedback 
        r_RRC_FAddValue ClkRead(ck_RRC_StopWatch);
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Add standard feedback instruction done
            r_RRC_FDone;
            !
            ! Feedback
            IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>1 THEN
                !
                ! Check additional feedback
                TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
                CASE 10001,10002,10003,10004:
                    !
                    ! add robot position  
                    r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
                DEFAULT:
                    !
                    ! Not defined 
                    ! Feedback not supported  
                    r_RRC_FError;
                ENDTEST
            ENDIF
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Stop (Stop)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_Stop()
        !
        ! Stop task
        Stop;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Wait time (WaitTime)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_WaitTime()
        !
        ! Read time 
        n_RRC_Time:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Wait time 
        WaitTime n_RRC_Time;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set maximal speed (VelSet)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetMaxSpeed()
        !
        ! Read overide
        n_RRC_Override:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Read max TCP
        n_RRC_MaxTCP:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V2;
        !
        ! Set max TCP velocity
        VelSet n_RRC_Override,n_RRC_MaxTCP;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Set acceleration (AccSet)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_SetAcceleration()
        !
        ! Read acceleration
        n_RRC_Acc:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Read acceleration ramp
        n_RRC_Ramp:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V2;
        !
        ! Acceleration set 
        AccSet n_RRC_Acc,n_RRC_Ramp;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Print text (TPWrite)
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_PrintText()
        !
        ! Read Text 
        st_RRC_TPWrite:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1;
        !
        ! Clear panel 
        TPErase;
        !
        ! Show message to user 
        TPWrite st_RRC_TPWrite;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     No opteration
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_Noop()
        !
        ! Just a dummy procedure for communication tests
        !
        ! Read the current Sequnce ID
        n_RRC_Act_S_ID:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.S_ID;
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Custom Instruction
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_CustomInstruction()
        !
        ! Read string value
        st_RRC_StringValue:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.St1;
        !
        ! Read float value
        n_RRC_FloatValue:=bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.V1;
        !
        ! Placehoder for your Code
        !
        ! Feedback
        IF bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufRob n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC
    
ENDMODULE