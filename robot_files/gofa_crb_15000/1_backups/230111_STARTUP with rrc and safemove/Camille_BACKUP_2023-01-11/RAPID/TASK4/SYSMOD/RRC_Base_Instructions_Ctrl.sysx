MODULE RRC_Base_Instructions_Ctrl(SYSMODULE)
    !***********************************************************************************
    !
    ! ETH Zurich / Robotic Fabrication Lab
    ! HIB C 13 / Stefano-Franscini-Platz 1
    ! CH-8093 Zurich
    !
    !***********************************************************************************
    !
    ! PROJECT     :  RRC - Rapid Robot Communication
    !
    ! FUNCTION    :  Base Instracion Library for controller  
    !
    ! AUTHOR      :  Philippe Fleischmann
    !
    ! EMAIL       :  rrc@arch.ethz.ch
    !
    ! HISTORY     :  2019.02.22
    !
    ! Copyright   :  ETH Zurich (CH) 2019
    !                - Philippe Fleischmann
    !                - Michael Lyrenmann
    !                - Gonzalo Casas
    !
    ! License     :  This code base is governed by an EULA (End-User License Agreement)
    !                which you have received together with the software.
    !                You are not allowed to use the software on a real robots
    !                without a signed EULA.
    !
    !                A copy of the EULA content is in the controller task (T_CTRL).
    !
    !***********************************************************************************

    !************************************************
    ! Function    :     Dummy
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_Dummy()
        !
        ! Just a dummy procedure for communication tests
        !
        ! Read the current Sequnce ID
        n_RRC_Act_S_ID:=bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.S_ID;
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !nChaNr
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Read actual jointtarget
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_GetJointT()
        !
        ! Read current joint position
        jp_RRC_Act:=CJointT(\TaskName:=st_RRC_ChaTask);
        !
        ! Add robot axis values to feedback
        r_RRC_FAddValue jp_RRC_Act.robax.rax_1;
        r_RRC_FAddValue jp_RRC_Act.robax.rax_2;
        r_RRC_FAddValue jp_RRC_Act.robax.rax_3;
        r_RRC_FAddValue jp_RRC_Act.robax.rax_4;
        r_RRC_FAddValue jp_RRC_Act.robax.rax_5;
        r_RRC_FAddValue jp_RRC_Act.robax.rax_6;
        !
        ! Add external axis values to feedback
        r_RRC_FAddValue jp_RRC_Act.extax.eax_a;
        r_RRC_FAddValue jp_RRC_Act.extax.eax_b;
        r_RRC_FAddValue jp_RRC_Act.extax.eax_c;
        r_RRC_FAddValue jp_RRC_Act.extax.eax_d;
        r_RRC_FAddValue jp_RRC_Act.extax.eax_e;
        r_RRC_FAddValue jp_RRC_Act.extax.eax_f;
        !
        ! Add cyclic feedback instruction done
        r_RRC_CyFDone;
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 10001:
                !
                ! add robot position  
                !* r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Get robtarget  
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_GetRobT()
        !
        ! Read current joint position
        p_RRC_Act:=CRobT(\TaskName:=st_RRC_ChaTask);
        !
        ! Add translastion values to feedback
        r_RRC_FAddValue p_RRC_Act.trans.x;
        r_RRC_FAddValue p_RRC_Act.trans.y;
        r_RRC_FAddValue p_RRC_Act.trans.z;
        !
        ! Add rotation values to feedback
        r_RRC_FAddValue p_RRC_Act.rot.q1;
        r_RRC_FAddValue p_RRC_Act.rot.q2;
        r_RRC_FAddValue p_RRC_Act.rot.q3;
        r_RRC_FAddValue p_RRC_Act.rot.q4;
        !
        ! Add external axis values to feedback
        r_RRC_FAddValue p_RRC_Act.extax.eax_a;
        r_RRC_FAddValue p_RRC_Act.extax.eax_b;
        r_RRC_FAddValue p_RRC_Act.extax.eax_c;
        r_RRC_FAddValue p_RRC_Act.extax.eax_d;
        r_RRC_FAddValue p_RRC_Act.extax.eax_e;
        r_RRC_FAddValue p_RRC_Act.extax.eax_f;
        !
        ! Add standard feedback instruction done
        r_RRC_FDone;
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>1 THEN
            !
            ! Check additional feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 10001:
                !
                ! add robot position  
                !* r_RRC_FPos bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.F_Lev;
            DEFAULT:
                !
                ! Not defined 
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
        ENDIF
        !
        ! Move message in send buffer
        r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Stop
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_Stop()
        !
        ! Stop task
        Stop;
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Teachpendant Write
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_TPWrite()
        !
        ! Read acceleration
        st_RRC_TPWrite{n_RRC_ChaNr}:=bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.St1;
        !
        ! Clear panel 
        TPErase;
        !
        ! Show message to user 
        TPWrite st_RRC_TPWrite{n_RRC_ChaNr};
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Cyclic job start
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_CyJobStart()
        !
        ! Read cyclic jop Sqz_ID
        n_RRC_CyJobStart_S_ID{n_RRC_ChaNr}:=bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.S_ID;
        !
        ! Read cyclic job
        st_RRC_CyclicJob{n_RRC_ChaNr}:=bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.St1;
        !
        ! Read cycle minimal time
        n_RRC_MinCycleTime{n_RRC_ChaNr}:=bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.V1;
        !
        ! Activate cyclic job
        b_RRC_CyclicJob{n_RRC_ChaNr}:=TRUE;
        !
        ! Start cycle clock 
        ClkStart ck_RRC_CycleJob{n_RRC_ChaNr};
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !nChaNr
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        !
        ! Event log message  
        r_RRC_EvLogMsg st_RRC_EvLogMsgHeader,"Cyclic job channel "+NumToStr(n_RRC_ChaNr,0)+" started with job: "+st_RRC_CyclicJob{n_RRC_ChaNr};
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Cyclic job end
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_CyJobEnd()
        !
        ! Stop and reset cycle clock 
        ClkStop ck_RRC_CycleJob{n_RRC_ChaNr};
        ClkReset ck_RRC_CycleJob{n_RRC_ChaNr};
        !
        ! Deactivate cyclic job
        b_RRC_CyclicJob{n_RRC_ChaNr}:=FALSE;
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !nChaNr
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        !
        ! Event log message  
        r_RRC_EvLogMsg st_RRC_EvLogMsgHeader,"Cyclic job channel "+NumToStr(n_RRC_ChaNr,0)+" ended with job: "+st_RRC_CyclicJob{n_RRC_ChaNr};
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Cyclic job test
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_CyJobTest()
        !
        ! Increase cycle time
        Incr n_RRC_ActCycle{n_RRC_ChaNr};
        !
        ! Write cycle number and ccurrent cycle time
        TPWrite "Cycle Nr: "+NumToStr(n_RRC_ActCycle{n_RRC_ChaNr},0)+" Cycle Time: "+NumToStr(n_RRC_LastCycleTime{n_RRC_ChaNr},3);
        !
        ! Feedback
        IF bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev>0 THEN
            !
            ! Cenerate feedback
            TEST bm_RRC_RecBufferCtrl{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf{n_RRC_ChaNr}}.Data.F_Lev
            CASE 1:
                !nChaNr
                ! Instruction done 
                r_RRC_FDone;
            DEFAULT:
                !
                ! Feedback not supported  
                r_RRC_FError;
            ENDTEST
            !
            ! Move message in send buffer
            r_RRC_MovMsgToSenBufCtrl n_RRC_ChaNr;
        ENDIF
        !
        ! Event log message  
        r_RRC_EvLogMsg st_RRC_EvLogMsgHeader,"Cyclic job channel "+NumToStr(n_RRC_ChaNr,0)+" running with job: "+st_RRC_CyclicJob{n_RRC_ChaNr};
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC
ENDMODULE