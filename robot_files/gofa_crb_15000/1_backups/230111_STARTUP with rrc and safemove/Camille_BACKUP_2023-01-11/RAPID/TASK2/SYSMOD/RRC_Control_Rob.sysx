MODULE RRC_Control_Rob(SYSMODULE)
    !***********************************************************************************
    !
    ! ETH Zurich / Robotic Fabrication Lab
    ! HIB C 13 / Stefano-Franscini-Platz 1
    ! CH-8093 Zurich
    !
    !***********************************************************************************
    !
    ! PROJECT     :  RRC - Rapid Robot Communication
    !
    ! FUNCTION    :  Control modul for the project 
    !
    ! AUTHOR      :  Philippe Fleischmann
    !
    ! EMAIL       :  rrc@arch.ethz.ch
    !
    ! HISTORY     :  2019.02.22
    !
    ! Copyright   :  ETH Zurich (CH) 2019
    !                - Philippe Fleischmann
    !                - Michael Lyrenmann
    !                - Gonzalo Casas
    !
    ! License     :  This code base is governed by an EULA (End-User License Agreement)
    !                which you have received together with the software.
    !                You are not allowed to use the software on a real robots
    !                without a signed EULA.
    !
    !                A copy of the EULA content is in the controller task (T_CTRL).
    !
    !***********************************************************************************

    !************************************************
    ! Function    :     Main for Project RRC
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_Main()
        !
        ! Wait until controller has set taskliste all
        WaitTime n_RRC_TimeTaskLiAll;
        !
        ! Task synchronisation 
        WaitSyncTask id_RRC_MainSta,tl_RRC_All;
        !
        ! Message for Operator
        TPWrite "RRC Main";
        !
        ! Inititalize cell 
        r_RRC_InitCell;
        !
        ! Production loop
        WHILE b_RRC_Run=TRUE DO
            !
            ! Wait for job in receiver buffer
            WaitUntil bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.startbit=TRUE\PollRate:=n_RRC_PulRatWaiJobRec;
            !
            ! Execute job from receiver buffer
            r_RRC_ExeJobFrmRecBuf;
        ENDWHILE
        !
        ! Message for Operator
        TPWrite "RRC End";
        !
        ! Task synchronisation 
        WaitSyncTask id_RRC_MainEnd,tl_RRC_All;
        !
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Initialize Cell
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_InitCell()
        !
        ! Task synchronisation 
        WaitSyncTask id_RRC_InitSta,tl_RRC_All;
        !
        ! Task synchronisation wait for controller data 
        WaitSyncTask id_RRC_InitCtrl,tl_RRC_All;
        !
        ! Initialize Variables
        r_RRC_InitVar;
        !
        ! Connect Alias Signals from Tool
        !
        ! Task synchronisation 
        WaitSyncTask id_RRC_InitEnd,tl_RRC_All;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Initialize Variables
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_InitVar()
        !
        ! Reset Read pointer 
        n_RRC_ReadPtrRecBuf:=1;
        !
        ! Reset Counter Feedback Value
        n_RRC_CounterFStr:=0;
        !
        ! Reset Counter Feedback Value
        n_RRC_CounterFVal:=0;
        !
        ! Clear actual sending message
        bm_RRC_ActSenMsgRob:=bm_RRC_Empty;
        !
        ! Read Taskname 
        st_RRC_Taskname:=GetTaskName();
        !
        ! Set channel number
        TEST st_RRC_Taskname
        CASE ch_RRC_Channels.Ch_1.T_Name:
            !
            ! Set channel nuber to task
            n_RRC_ChaNr:=ch_RRC_Channels.Ch_1.Ch_Nr;
            !
        CASE ch_RRC_Channels.Ch_2.T_Name:
            !
            ! Set channel nuber to task
            n_RRC_ChaNr:=ch_RRC_Channels.Ch_2.Ch_Nr;
            !
        CASE ch_RRC_Channels.Ch_3.T_Name:
            !
            ! Set channel nuber to task
            n_RRC_ChaNr:=ch_RRC_Channels.Ch_3.Ch_Nr;
            !
        CASE ch_RRC_Channels.Ch_4.T_Name:
            !
            ! Set channel nuber to task
            n_RRC_ChaNr:=ch_RRC_Channels.Ch_4.Ch_Nr;
            !
        DEFAULT:
            !
            ! Programm error
            r_RRC_ProgError;
        ENDTEST
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Activate a job for the controller 
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_JobForCtrl(string stJob)
        !
        ! Reserve controller
        WaitTestAndSet b_RRC_CtrlInUse;
        !
        ! Send job to controller
        st_RRC_JobForCtrl:=stJob;
        !
        ! Start jop for controller
        b_RRC_CtrlWaitForJob:=FALSE;
        !
        ! Wait until controller is finish with job
        WaitUntil b_RRC_CtrlWaitForJob=TRUE;
        !
        ! Release controller
        b_RRC_CtrlInUse:=FALSE;
        !
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Execute job from reveicer buffer
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ExeJobFrmRecBuf()
        !
        ! Call instruction 
        %bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.Data.Instr %;
        !
        ! Set job done
        bm_RRC_RecBufferRob{n_RRC_ChaNr,n_RRC_ReadPtrRecBuf}.startbit:=FALSE;
        !
        ! Count read pointer
        IF n_RRC_ReadPtrRecBuf<DIM(bm_RRC_RecBufferRob,2) THEN
            !
            ! Increas write pointer form buffer
            Incr n_RRC_ReadPtrRecBuf;
        ELSE
            !
            ! Restart with one
            n_RRC_ReadPtrRecBuf:=1;
        ENDIF
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     Move message to send buffer roboter 1
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_MovMsgToSenBufRob(num nChaNr)
        !
        ! Count buffer pointer
        IF n_RRC_WritePtrSenBufRob{nChaNr}<DIM(bm_RRC_SenBufferRob,2) THEN
            !
            ! Increas write pointer form buffer
            Incr n_RRC_WritePtrSenBufRob{nChaNr};
        ELSE
            !
            ! Restart with one
            n_RRC_WritePtrSenBufRob{nChaNr}:=1;
        ENDIF
        !
        ! Check for bufferline free to write 
        IF NOT bm_RRC_SenBufferRob{nChaNr,n_RRC_WritePtrSenBufRob{nChaNr}}.startbit=FALSE THEN
            !
            ! Wait for bufferline free to write 
            WaitUntil bm_RRC_SenBufferRob{nChaNr,n_RRC_WritePtrSenBufRob{nChaNr}}.startbit=FALSE\PollRate:=0.004\Visualize\Header:="RRC MovMsgToSenBufRob1"\Message:="Buffer full"\Icon:=iconInfo;
        ENDIF
        !
        ! Write data in buffer
        bm_RRC_SenBufferRob{nChaNr,n_RRC_WritePtrSenBufRob{nChaNr}}.Data:=bm_RRC_ActSenMsgRob.Data;
        !
        ! Set Startbit
        bm_RRC_SenBufferRob{nChaNr,n_RRC_WritePtrSenBufRob{nChaNr}}.startbit:=TRUE;
        !
        ! Clear actual sending message
        bm_RRC_ActSenMsgRob:=bm_RRC_Empty;
        !
        ! Reset Counter Feedback String and Value
        n_RRC_CounterFStr:=0;
        n_RRC_CounterFVal:=0;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

    !************************************************
    ! Function    :     ProgError
    ! Programmer  :     Philippe Fleischmann
    ! Date        :     2019.02.22
    !***************** ETH Zurich *******************
    !
    PROC r_RRC_ProgError()
        ! 
        ! User Info
        TPWrite "Program Error";
        !
        ! Stop Program
        Stop;
        RETURN ;
    ERROR
        ! Placeholder for Error Code...
    ENDPROC

ENDMODULE